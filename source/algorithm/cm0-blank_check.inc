// Generated by vscode-hexdump
//
// R0 - Points to structure containing number of words and address of data
// R1 - Value to check for (0xffffffff)
//
//   0:   6802            ldr     r2, [r0, #0]	; r2 is number of words to check
//   2:   4212            tst     r2, r2
//   4:   d00d            beq.n   0x22			; exit if no data to check
//   6:   6843            ldr     r3, [r0, #4]	; r3 is address of data
//   8:   681c            ldr     r4, [r3, #0]	; r4 is next word of data
//   a:   3304            adds    r3, #4		; increment to next word
//   c:   428c            cmp     r4, r1		; see if we have the data (0xffffffff) we are looking for
//   e:   d105            bne.n   0x1c			; if not return 0
//  10:   3a01            subs    r2, #1		; reduce number of remaining words
//  12:   d1f9            bne.n   0x8			; and continue until done
//  14:   2401            movs    r4, #1		; return 1 if everything matches our search value
//  16:   6004            str     r4, [r0, #0]	; replace the length in our structure with the return value
//  18:   3008            adds    r0, #8		; force the algorithm to end by pointing to length of 0 in structure
//  1a:   e7f1            b.n     0x0
//  1c:   2400            movs    r4, #0		; return 0
//  1e:   e7fa            b.n     0x16
//  20:   0000            movs    r0, r0		; this is a no-op but will set condition flags (negative, zero, carry and overflow)
//  22:   be00            bkpt    0x0000		; raise a breakpoint interrupt


0x02, 0x68, 0x12, 0x42, 0x0d, 0xd0, 0x43, 0x68,
0x1c, 0x68, 0x04, 0x33, 0x8c, 0x42, 0x05, 0xd1,
0x01, 0x3a, 0xf9, 0xd1, 0x01, 0x24, 0x04, 0x60,
0x08, 0x30, 0xf1, 0xe7, 0x00, 0x24, 0xfa, 0xe7,
0x00, 0x00, 0x00, 0xbe,
